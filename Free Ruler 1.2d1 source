App.MoveRuler:Sub MoveRuler(Ruler as window, OtherRuler as window, Key as string)  dim inc as integer  dim group as boolean  dim alreadyvisible as boolean    if keyboard.shiftKey then    inc = 10  else    inc = 1  end    group = OptionsGroupRulers.checked    'msgBox str(asc(key))    select case asc(key)      case 103 // g for group    GroupRulers      case 116  // t for interactive tick marks    ToggleMousePosition      case 117 // u for units    if Ruler.title = "hRuler" then      hRuler.CycleUnits    else      vRuler.CycleUnits    end      case 112 // p for pixels    if Ruler.title = "hRuler" then      hRuler.usePixels    else      vRuler.usePixels    end      case 105 // i for inches    if Ruler.title = "hRuler" then      hRuler.useInches    else      vRuler.useInches    end      case 107 // k for picas    if Ruler.title = "hRuler" then      hRuler.usePicas    else      vRuler.usePicas    end      case 99 // c for centimeters    if Ruler.title = "hRuler" then      hRuler.useCm    else      vRuler.useCm    end      case 28    ruler.left = ruler.left - inc    if group then      OtherRuler.left = OtherRuler.left - inc     end  case 29    ruler.left = ruler.left + inc    if group then      OtherRuler.left = OtherRuler.left + inc     end  case 30    ruler.top = ruler.top - inc    if group then      OtherRuler.top = OtherRuler.top - inc     end  case 31    ruler.top = ruler.top + inc    if group then      OtherRuler.top = OtherRuler.top + inc     end  case 48 // zero '0'    alreadyvisible = moveZeroPoint(ruler)    if keyboard.commandKey or group then      alreadyvisible = MoveZeroPoint(OtherRuler)      if not alreadyvisible then        ruler.show      end    end  case 111 // the letter 'o'    alreadyvisible = moveZeroPoint(ruler)    // don't need command key code here    // because cmd-O is assigned to the menu item    if group then      alreadyvisible = MoveZeroPoint(OtherRuler)      if not alreadyvisible then        ruler.show      end    end      end select  End SubApp.MoveZeroPoint:Function MoveZeroPoint(ruler as window) As Boolean  dim alreadyvisible as boolean    if ruler.width > ruler.height then    ruler.left = system.mousex + 1    ruler.top = system.mousey - ruler.height  else    ruler.left = system.mousex - ruler.width    ruler.top = system.mousey + 1  end    alreadyvisible = ruler.visible  if not ruler.visible then    ruler.visible = true  end    return alreadyvisibleEnd FunctionApp.GroupRulers:Sub GroupRulers()  if OptionsGroupRulers.checked then    OptionsGroupRulers.checked = false    hRuler.LockCanvasArt.backdrop = lockunlocked    vRuler.LockCanvasArt.backdrop = lockunlocked    hRuler.LockCanvas.helpTag = "Click to group rulers"    vRuler.LockCanvas.helpTag = "Click to group rulers"  else    OptionsGroupRulers.checked = true    hRuler.LockCanvasArt.backdrop = locklocked    vRuler.LockCanvasArt.backdrop = locklocked    hRuler.LockCanvas.helpTag = "Click to ungroup rulers"    vRuler.LockCanvas.helpTag = "Click to ungroup rulers"  end  End SubApp.PixelsToInches:Function PixelsToInches(p as double) As Double  return ThreeDigits(p / ppi)  End FunctionApp.InchesToPixels:Function InchesToPixels(i as double) As Double  return ThreeDigits(i * ppi)End FunctionApp.PixelsToPicas:Function PixelsToPicas(p as double) As String  dim picas as double  dim points as double    points = p / (ppi / 72)  picas = points \ 12  points = points mod 12    return str(picas) + "p" + str(points)  End FunctionApp.PixelsToCm:Function PixelsToCm(p as double) As Double  return ThreeDigits(p / ppi * 2.54)  End FunctionApp.PicasToPixels:Function PicasToPixels(k as String) As Double  dim picas as double  dim points as double  dim pixels as double    'points = p / (ppi / 72)  'picas = points / 12  'points = points mod 12    if inStr(k, "p") > 0 then    picas = CDbl(nthField(k, "p", 1))    points = CDbl(nthField(k, "p", 2))  else    picas = CDbl(k)    points = 0  end    points = points + (picas * 12)  pixels = points * (ppi / 72)    return ThreeDigits(pixels)  End FunctionApp.CmToPixels:Function CmToPixels(cm as Double) As Double  return ThreeDigits(cm / 2.54 * ppi)End FunctionApp.ToggleMousePosition:Sub ToggleMousePosition()  if OptionsShowMousePosition.checked then    OptionsShowMousePosition.checked = false    app.MouseCursor = nil  else    OptionsShowMousePosition.checked = true    app.MouseCursor = CursorCrossHair  end  End SubApp.SetUnitsMenu:Sub SetUnitsMenu(units as String)  UnitsPixels.checked = false  UnitsPicas.checked = false  UnitsCm.checked = false  UnitsInches.checked = false    if units = "pixels" then    UnitsPixels.checked = true  elseif units = "inches" then    UnitsInches.checked = true  elseif units = "picas" then    UnitsPicas.checked = true  elseif units = "cm" then    UnitsCm.checked = true  end  End SubApp.ReturnCursor:Sub ReturnCursor()  if OptionsShowMousePosition.checked then    mouseCursor = CursorCrossHair  else    mouseCursor = nil  endEnd SubApp.ToggleTab:Sub ToggleTab()  if tabbed then    hRuler.visible = TabHRulerVisible    vRuler.visible = TabVRulerVisible    tabbed = false  else    TabHRulerVisible = hRuler.visible    TabVRulerVisible = vRuler.visible    hRuler.visible = false    vRuler.visible = false    tabbed = true  endEnd SubApp.PixelsToPicasDbl:Function PixelsToPicasDbl(p as Integer) As Double  dim points as double  dim picas as double    points = p / (ppi / 72)  picas = points / 12    return ThreeDigits(picas)  End FunctionApp.RefreshRulers:Sub RefreshRulers()  dim u as string    u = hRuler.units  hRuler.units = ""    hRuler.hTicksInches = nil  hRuler.hTicksPicas = nil  hRuler.hticksCm = nil  if hRuler.visible then    hRuler.CheckUnits(u)    hRuler.refresh  end    u = vRuler.units  vRuler.units = ""    vRuler.vTicksInches = nil  vRuler.vTicksPicas = nil  vRuler.vticksCm = nil  if vRuler.visible then    vRuler.CheckUnits(u)    vRuler.refresh  end  End SubApp.Convert:Function Convert(amt as string, FromUnit as string, ToUnit as string) As String  dim pixels as double  dim result as string    if FromUnit = "cm" then    pixels = CmToPixels(CDbl(amt))      elseif FromUnit = "inches" then    pixels = InchesToPixels(CDbl(amt))      elseif FromUnit = "picas" then    pixels = PicasToPixels(amt)      elseif FromUnit = "pixels" then    pixels = CDbl(amt)      end    if ToUnit = "cm" then    result = str(PixelsToCm(pixels))      elseif ToUnit = "inches" then    result = str(PixelsToInches(pixels))      elseif ToUnit = "picas" then    result = PixelsToPicas(pixels)      elseif ToUnit = "pixels" then    result = str(pixels)      end    return result  End FunctionApp.ThreeDigits:Function ThreeDigits(n as double) As Double  dim t as integer  dim d as double    t = round(n * 1000)  d = t / 1000    return d  End FunctionApp.Activate:Sub Activate()  dim i as integer  dim nowindows as boolean    nowindows = true  for i = 0 to windowcount - 1    if window(i).visible then      nowindows = false    end  next    if nowindows then    if lastRuler <> nil then      lastRuler.show    end  end    activated = true  End SubApp.Close:Sub Close()  hRuler.close  vRuler.close    setPrefBoolean "ShowMousePosition", OptionsShowMousePosition.checked  setPrefBoolean "GroupRulers", OptionsGroupRulers.checked    setPrefBoolean "PrefsExist", true  writePrefsFileEnd SubApp.Deactivate:Sub Deactivate()  activated = falseEnd SubApp.Open:Sub Open()  // app defaults  rulerColor = RGB(255,255,179)  tickColor =  RGB(140,140,120)  darkTickColor = RGB(50,50,10)  tabbed = false  LastKey = ""  KeyListening = true  activated = true  AboutWindow.hide // turns on the appTimer      // user preferences  initPrefFile "Free Ruler Preferences"    ppi = getPrefDouble("ppi", 72)  scale = 1    OptionsShowMousePosition.checked = getPrefBoolean("ShowMousePosition",true)  ShowMousePosition = OptionsShowMousePosition.checked  if OptionsShowMousePosition.checked then    mouseCursor = CursorCrossHair  end    if getPrefBoolean("GroupRulers",false) then    GroupRulers  end    vRuler.hide  hRuler.hide    vRuler.visible = getPrefBoolean("vRulerVisible", false)  hRuler.visible = getPrefBoolean("hRulerVisible", true)    if getPrefString("frontmost","") = "hRuler" and hRuler.visible then    hRuler.show  elseif getPrefString("frontmost","") = "vRuler" and vRuler.visible then    vRuler.show  end    if hRuler.visible = false and vRuler.visible = false then    hRuler.show  end    if not GetPrefBoolean("PrefsExist", false) then    AboutWindow.show  end  End SubApp.EnableMenuItems:Sub EnableMenuItems()  AppleAbout.enable  RulerHorizontal.enable  RulerVertical.enable  UnitsUnitConverter.enable  UnitsConversionSettings.enable  OptionsShowMousePosition.enable  OptionsGroupRulers.enable  HelpTips.enable  End SubhRuler.OpenSizeDialog:Sub OpenSizeDialog()  SizeDialog.RulerLength = width + 1  SizeDialog.units = units  SizeDialog.RulerToSize = self  SizeDialog.initEnd SubhRuler.DrawPixels:Sub DrawPixels()  dim x, p as integer  dim label as string  dim pic as picture    pic = NewPicture(maxwidth+20,ticksCanvas.height,screen(0).depth)    pic.graphics.foreColor = backcolor  pic.graphics.fillRect 0, 0, pic.graphics.width, pic.graphics.height    pic.graphics.foreColor = app.tickColor  pic.graphics.textfont = "System"  pic.graphics.textsize = 9    for x = 0 to maxwidth + 20 step 2        p = round(x * app.scale)    label = str(x)        if x mod 100 = 0 then      if label <> "0" then        pic.graphics.foreColor = app.darkTickColor        pic.graphics.drawString label, p - (pic.graphics.stringWidth(label) / 2) - 1, pic.height - 10      end            pic.graphics.foreColor = app.tickColor      pic.graphics.drawLine p - 1, pic.height - 7, p - 1, pic.height          elseif x mod 50 = 0 then      pic.graphics.drawString label, p - (pic.graphics.stringWidth(label) / 2) - 1, pic.height - 10      pic.graphics.drawLine p - 1, pic.height - 6, p - 1, pic.height          elseif x mod 10 = 0 then      pic.graphics.drawLine p - 1, pic.height - 5, p - 1, pic.height          else      pic.graphics.drawLine p - 1, pic.height - 3, p - 1, pic.height          end      next    hTicksPixels = pic  End SubhRuler.CycleUnits:Sub CycleUnits()  if units = "pixels" then    UseInches  elseif units = "inches" then    UsePicas  elseif units = "picas" then    UseCm  elseif units = "cm" then    UsePixels  end  End SubhRuler.UsePixels:Sub UsePixels()  if units <> "pixels" then        if hTicksPixels = nil then      DrawPixels    end        ticksCanvas.backdrop = hTicksPixels        units = "pixels"    UnitLabel.text = "Pixels"    UnitLabel.width = hTicksPixels.graphics.stringWidth(UnitLabel.text) + 4    app.SetUnitsMenu units    setPrefString "hUnits", units        refresh  end    if OptionsGroupRulers.checked then    if vRuler.units <> units then      vRuler.UsePixels    end  end  End SubhRuler.DrawInches:Sub DrawInches()  dim x, p as integer  dim label as string  dim in, div as integer  dim pic as picture    pic = NewPicture(maxwidth+20,ticksCanvas.height,screen(0).depth)    pic.graphics.foreColor = backcolor  pic.graphics.fillRect 0, 0, pic.graphics.width, pic.graphics.height    pic.graphics.foreColor = app.tickColor  pic.graphics.textfont = "System"  pic.graphics.textsize = 9    in = app.PixelsToInches(maxwidth + 20)  div = 16 //16ths of an inch    for x = 0 to in * div        p = round(app.InchesToPixels(x / div)  * app.scale)        if x mod div = 0 then      label = str(x / div)      if label <> "0" then        pic.graphics.foreColor = app.darkTickColor        pic.graphics.drawString label, p - (pic.graphics.stringWidth(label) / 2) - 1, pic.height - 10      end            pic.graphics.foreColor = app.tickColor      pic.graphics.drawLine p - 1, pic.height - 7, p- 1, pic.height          elseif x mod (div / 2) = 0 then      pic.graphics.drawLine p - 1, pic.height - 6, p- 1, pic.height          elseif x mod (div / 4) = 0 then      pic.graphics.drawLine p - 1, pic.height - 4, p- 1, pic.height          elseif x mod (div / 8) = 0 then      pic.graphics.drawLine p - 1, pic.height - 3, p- 1, pic.height          elseif x mod (div / 16) = 0 then      pic.graphics.drawLine p - 1, pic.height - 2, p- 1, pic.height          end      next    hTicksInches = picEnd SubhRuler.UseInches:Sub UseInches()  if units <> "inches" then        if hTicksInches = nil then      DrawInches    end        ticksCanvas.backdrop = hTicksInches        units = "inches"    UnitLabel.text = "Inches"    UnitLabel.width = hTicksInches.graphics.stringWidth(UnitLabel.text) + 4    app.SetUnitsMenu units    setPrefString "hUnits", units        refresh  end    if OptionsGroupRulers.checked then    if vRuler.units <> units then      vRuler.UseInches    end  end  End SubhRuler.DrawPicas:Sub DrawPicas()  dim x, p as integer  dim picas as integer  dim pic as picture    pic = NewPicture(maxwidth+20,ticksCanvas.height,screen(0).depth)    pic.graphics.foreColor = backcolor  pic.graphics.fillRect 0, 0, pic.graphics.width, pic.graphics.height    pic.graphics.foreColor = app.tickColor  pic.graphics.textfont = "System"  pic.graphics.textsize = 9    picas = round(app.PixelsToPicasDbl(maxwidth + 20))    for x = 0 to picas        p = round(app.PicasToPixels(str(x)) * app.scale)        if x mod 6 = 0 then      if x <> 0 then        pic.graphics.foreColor = app.darkTickColor        pic.graphics.drawString str(x), p - (pic.graphics.stringWidth(str(x)) / 2) - 1, pic.height - 10      end            pic.graphics.foreColor = app.tickColor      pic.graphics.drawLine p - 1, pic.height - 7, p- 1, pic.height          elseif x mod 3 = 0 then      pic.graphics.drawLine p - 1, pic.height - 5, p- 1, pic.height          else      pic.graphics.drawLine p - 1, pic.height - 3, p- 1, pic.height          end      next    hTicksPicas = picEnd SubhRuler.UsePicas:Sub UsePicas()  if units <> "picas" then        if hTicksPicas = nil then      DrawPicas    end        ticksCanvas.backdrop = hTicksPicas        units = "picas"    UnitLabel.text = "Picas"    UnitLabel.width = hTicksPicas.graphics.stringWidth(UnitLabel.text) + 4    app.SetUnitsMenu units    setPrefString "hUnits", units        refresh  end    if OptionsGroupRulers.checked then    if vRuler.units <> units then      vRuler.UsePicas    end  end  End SubhRuler.UseCm:Sub UseCm()  if units <> "cm" then        if hTicksCm = nil then      DrawCm    end        ticksCanvas.backdrop = hTicksCm        units = "cm"    UnitLabel.text = "Centimeters"    UnitLabel.width = hTicksCm.graphics.stringWidth(UnitLabel.text) + 4    app.SetUnitsMenu units    setPrefString "hUnits", units        refresh        if getPrefBoolean("ShowCmWarning", true) then      CmWarning.show    end      end    if OptionsGroupRulers.checked then    if vRuler.units <> units then      vRuler.UseCm    end  end  End SubhRuler.DrawCm:Sub DrawCm()  dim x, p as integer  dim label as string  dim cm, div as integer  dim pic as picture    pic = NewPicture(maxwidth+20,ticksCanvas.height,screen(0).depth)    pic.graphics.foreColor = backcolor  pic.graphics.fillRect 0, 0, pic.graphics.width, pic.graphics.height    pic.graphics.foreColor = app.tickColor  pic.graphics.textfont = "System"  pic.graphics.textsize = 9    cm = app.PixelsToCm(maxwidth + 20)  div = 10  // step 10 times for each cm    for x = 0 to cm * div        p = round(app.CmToPixels(x / div) * app.scale)        if x mod div = 0 then      label = str(x / div)      if label <> "0" then        pic.graphics.foreColor = app.darkTickColor        pic.graphics.drawString label, p - (pic.graphics.stringWidth(label) / 2) - 1, pic.height - 10      end            pic.graphics.foreColor = app.tickColor      pic.graphics.drawLine p - 1, pic.height - 7, p - 1, pic.height          elseif x mod (div / 2) = 0 then      pic.graphics.drawLine p - 1, pic.height - 5, p - 1, pic.height          else      pic.graphics.drawLine p - 1, pic.height - 3, p - 1, pic.height          end      next    hTicksCm = picEnd SubhRuler.CheckUnits:Sub CheckUnits(u as String)  if u = "inches" then    UseInches  elseif u = "picas" then    UsePicas  elseif u = "cm" then    UseCm  else    UsePixels  endEnd SubhRuler.DrawPixelsOld:Sub DrawPixelsOld()  dim x, p as integer  dim label as string  dim pic as picture    pic = NewPicture(maxwidth+20,ticksCanvas.height,screen(0).depth)    pic.graphics.foreColor = backcolor  pic.graphics.fillRect 0, 0, pic.graphics.width, pic.graphics.height    pic.graphics.foreColor = app.tickColor  pic.graphics.textfont = "System"  pic.graphics.textsize = 9    for x = 0 to maxwidth + 20 step 2        p = round(x * app.scale)        if x mod 20 = 0 then      if x mod 100 = 0 then        pic.graphics.foreColor = app.darkTickColor        label = str(x)              else        pic.graphics.foreColor = app.tickColor        label = str(x mod 100)              end            if label <> "0" then        pic.graphics.drawString label, p - (pic.graphics.stringWidth(label) / 2) - 1, pic.height - 10      end            pic.graphics.foreColor = app.tickColor      pic.graphics.drawLine p - 1, pic.height - 7, p - 1, pic.height          elseif x mod 10 = 0 then      pic.graphics.drawLine p - 1, pic.height - 6, p - 1, pic.height          else      pic.graphics.drawLine p - 1, pic.height - 3, p - 1, pic.height          end      next    hTicksPixels = pic  End SubhRuler.DrawInteractiveTick:Sub DrawInteractiveTick()  dim m as integer  dim pad,tickpad as integer  pad  = 12  tickpad = 3    // begin crosshair code  if OptionsShowMousePosition.checked and app.showMousePosition then    m = mousex        if m + 1 < 0 or m > width then      mouseTick.visible = false      mouseRect.visible = false      mouseLabel.visible = false    else      mouseTick.x1 = m      mouseTick.x2 = m            mouseLabel.text = app.Convert(str(m + 1), "pixels", units)      mouseLabel.width = graphics.stringWidth(mouseLabel.text) + 1      mouseRect.width = mouseLabel.width + tickpad + tickpad            if m < unitLabel.left + unitLabel.width + pad - tickpad then        mouseRect.left = unitLabel.left + unitLabel.width + pad              elseif m < lockCanvas.left - mouseRect.width - pad then        mouseRect.left = m + tickpad              elseif m > lockCanvas.left - pad + tickpad + 1 then        mouseRect.left = lockCanvas.left - mouseRect.width - pad + 2              else        mouseRect.left = m - mouseRect.width - tickpad + 1              end            mouseLabel.left = mouseRect.left + 3            mouseTick.visible = true      mouseRect.visible = true      mouseLabel.visible = true    end  else    mouseTick.visible = false    mouseRect.visible = false    mouseLabel.visible = false  end  // end crosshair code  End SubhRuler.MouseEnter:Sub MouseEnter()  app.ShowMousePosition = false  app.mouseCursor = nil  End SubhRuler.MouseExit:Sub MouseExit()  if not app.resizing then    app.ShowMousePosition = true  end    if OptionsShowMousePosition.checked then    app.mouseCursor = CursorCrossHair  else    app.mouseCursor = nil  endEnd SubhRuler.MouseMove:Sub MouseMove(X As Integer, Y As Integer)  app.mouseCursor = nilEnd SubhRuler.Close:Sub Close()  setPrefBoolean "hRulerVisible", visible  setPrefWindow "hRuler", self  End SubhRuler.Deactivate:Sub Deactivate()  activated = false    if mousex > 0 and mousex < width and mousey > 0 and mousey < height then    app.mouseCursor = nil    app.showMousePosition = false  else    if OptionsShowMousePosition.checked then      app.mouseCursor = CursorCrossHair    else      app.mouseCursor = nil    end  end    buttonClose.backdrop = closebuttondeactivated    if visible then    RulerHorizontal.text = "Bring Horizontal Ruler Forward"  else    RulerHorizontal.text = "Show Horizontal Ruler"    if not vRuler.visible then      app.lastRuler = self    end  endEnd SubhRuler.MouseUp:Sub MouseUp(X As Integer, Y As Integer)  mouseCursor = CursorHandEnd SubhRuler.MouseDrag:Sub MouseDrag(X As Integer, Y As Integer)  self.left = self.left + x - MouseDownX  self.top = self.top + y - MouseDownY    if OptionsGroupRulers.checked then    vRuler.left = vRuler.left + x - MouseDownX    vRuler.top = vRuler.top + y - MouseDownY  endEnd SubhRuler.EnableMenuItems:Sub EnableMenuItems()    RulerClose.enable  RulerChangeLength.enable  EditCopy.enable  OptionsAlignRulers.enable  UnitsPixels.enable  UnitsInches.enable  UnitsPicas.enable  UnitsCm.enable  UnitsCycleUnits.enable  End SubhRuler.Open:Sub Open()  // prefs    top = 32  left = 61  GetPrefWindow("hRuler", self)  CheckUnits(getPrefString("hUnits","pixels"))    // non-prefs  graphics.textfont = "System"  graphics.textsize = 9    backColor = app.rulerColor  RulerHorizontal.text = "Hide Horizontal Ruler"  mouseCursor = CursorHand  End SubhRuler.Activate:Sub Activate()  activated = true    if mousex > 0 and mousex < width and mousey > 0 and mousey < height then    app.mouseCursor = nil    app.ShowMousePosition = false  end    buttonClose.backdrop = closebutton    app.SetUnitsMenu units  app.tabbed = false    RulerHorizontal.text = "Hide Horizontal Ruler"    SetPrefString "frontmost", "hRuler"End SubhRuler.MouseDown:Function MouseDown(X As Integer, Y As Integer) As Boolean  mouseCursor = CursorHandDown  MouseDownX = x  MouseDownY = y  return trueEnd FunctionhRuler.KeyDown:Function KeyDown(Key As String) As Boolean  app.moveRuler(self,vRuler,key)End FunctionhRuler.UnitLabel.MouseMove:Sub MouseMove(X As Integer, Y As Integer)  if activated then    mouseCursor = arrowCursor  endEnd SubhRuler.UnitLabel.MouseExit:Sub MouseExit()  if activated then    mouseCursor = CursorHand  endEnd SubhRuler.UnitLabel.MouseEnter:Sub MouseEnter()  if activated then    mouseCursor = arrowCursor  endEnd SubhRuler.UnitLabel.MouseUp:Sub MouseUp(X As Integer, Y As Integer)  if x > 0 and x < me.width and y > 0 and y < me.height then    CycleUnits    mouseCursor = arrowCursor  else    mouseCursor = CursorHand  endEnd SubhRuler.UnitLabel.MouseDown:Function MouseDown(X As Integer, Y As Integer) As Boolean  return trueEnd FunctionhRuler.buttonClose.MouseMove:Sub MouseMove(X As Integer, Y As Integer)  if activated then    mouseCursor = arrowCursor    me.Backdrop = closebuttonover  endEnd SubhRuler.buttonClose.MouseUp:Sub MouseUp(X As Integer, Y As Integer)  me.backdrop = closebutton    if x > 0 and x < me.width and y > 0 and y < me.height then    hide  else    mouseCursor = CursorHand  endEnd SubhRuler.buttonClose.MouseExit:Sub MouseExit()  if activated then    mouseCursor = CursorHand    Me.Backdrop = closebutton  endEnd SubhRuler.buttonClose.MouseDown:Function MouseDown(X As Integer, Y As Integer) As Boolean  Me.backdrop = closebuttondown  return trueEnd FunctionhRuler.buttonClose.MouseEnter:Sub MouseEnter()  if activated then    mouseCursor = arrowCursor    me.Backdrop = closebuttonover  endEnd SubhRuler.ResizeBox.MouseUp:Sub MouseUp(X As Integer, Y As Integer)  app.resizing = false    if keyboard.optionKey then    OpenSizeDialog  end    if mousex < 0 or mousex > width or mousey < 0 or mousey > height then    app.ShowMousePosition = true  endEnd SubhRuler.ResizeBox.MouseExit:Sub MouseExit()  mouseCursor = CursorHandEnd SubhRuler.ResizeBox.MouseEnter:Sub MouseEnter()  mouseCursor = arrowCursorEnd SubhRuler.ResizeBox.MouseDrag:Sub MouseDrag(X As Integer, Y As Integer)  me.window.width = me.window.width + x - MouseDownX    if me.window.width < me.window.minWidth then    me.window.width = me.window.minWidth  end  if me.window.width > me.window.maxWidth then    me.window.width = me.window.maxWidth  endEnd SubhRuler.ResizeBox.MouseDown:Function MouseDown(X As Integer, Y As Integer) As Boolean  app.resizing = true  MouseDownX = x  MouseDownY = y  return trueEnd FunctionhRuler.LockCanvas.MouseUp:Sub MouseUp(X As Integer, Y As Integer)  if x > 0 and x < me.width and y > 0 and y < me.height then    app.GroupRulers  endEnd SubhRuler.LockCanvas.MouseExit:Sub MouseExit()  mouseCursor = CursorHandEnd SubhRuler.LockCanvas.MouseEnter:Sub MouseEnter()  mouseCursor = arrowCursorEnd SubhRuler.LockCanvas.MouseDown:Function MouseDown(X As Integer, Y As Integer) As Boolean  return trueEnd FunctionvRuler.OpenSizeDialog:Sub OpenSizeDialog()  SizeDialog.RulerLength = height + 1  SizeDialog.units = units  SizeDialog.RulerToSize = self  SizeDialog.init  End SubvRuler.DrawPixels:Sub DrawPixels()  dim x, p as integer  dim label as string  dim pic as picture    pic = NewPicture(ticksCanvas.width, maxheight+20, screen(0).depth)    pic.graphics.foreColor = backcolor  pic.graphics.fillRect 0, 0, pic.graphics.width, pic.graphics.height    pic.graphics.foreColor = app.tickColor  pic.graphics.textfont = "System"  pic.graphics.textsize = 9    for x = 0 to maxheight + 20 step 2        p = round(x * app.scale)    label = str(x)        if x mod 100 = 0 then      if label <> "0" then        pic.graphics.foreColor = app.darkTickColor        pic.graphics.drawString label, pic.width - 9 - pic.graphics.stringWidth(label), p + 3      end            pic.graphics.foreColor = app.tickColor      pic.graphics.drawLine pic.width - 7, p - 1, pic.width, p - 1          elseif x mod 50 = 0 then      pic.graphics.drawString label, pic.width - 9 - pic.graphics.stringWidth(label), p + 3      pic.graphics.drawLine pic.width - 6, p - 1, pic.width, p - 1          elseif x mod 10 = 0 then      pic.graphics.drawLine pic.width - 5, p - 1, pic.width, p - 1          else      pic.graphics.drawLine pic.width - 3, p - 1, pic.width, p - 1          end      next    vTicksPixels = pic  End SubvRuler.CycleUnits:Sub CycleUnits()  if units = "pixels" then    UseInches  elseif units = "inches" then    UsePicas  elseif units = "picas" then    UseCm  elseif units = "cm" then    UsePixels  end  End SubvRuler.UseInches:Sub UseInches()  if units <> "inches" then        if vTicksInches = nil then      DrawInches    end        ticksCanvas.backdrop = vTicksInches        units = "inches"    UnitLabel.text = "Inches"    UnitLabel.width = vTicksInches.graphics.stringWidth(UnitLabel.text) + 4    app.SetUnitsMenu units    setPrefString "vUnits", units        refresh  end    if OptionsGroupRulers.checked then    if hRuler.units <> units then      hRuler.UseInches    end  end  End SubvRuler.UseCm:Sub UseCm()  if units <> "cm" then        if vTicksCm = nil then      DrawCm    end        ticksCanvas.backdrop = vTicksCm        units = "cm"    UnitLabel.text = "Cm"    UnitLabel.width = vTicksCm.graphics.stringWidth(UnitLabel.text) + 4    app.SetUnitsMenu units    setPrefString "vUnits", units        refresh        if getPrefBoolean("ShowCmWarning", true) then      CmWarning.show    end      end    if OptionsGroupRulers.checked then    if hRuler.units <> units then      hRuler.UseCm    end  end  End SubvRuler.UsePicas:Sub UsePicas()  if units <> "picas" then        if vTicksPicas = nil then      DrawPicas    end        ticksCanvas.backdrop = vTicksPicas        units = "picas"    UnitLabel.text = "Picas"    UnitLabel.width = vTicksPicas.graphics.stringWidth(UnitLabel.text) + 4    app.SetUnitsMenu units    setPrefString "vUnits", units        refresh  end    if OptionsGroupRulers.checked then    if hRuler.units <> units then      hRuler.UsePicas    end  end  End SubvRuler.UsePixels:Sub UsePixels()  if units <> "pixels" then        if vTicksPixels = nil then      DrawPixels    end        ticksCanvas.backdrop = vTicksPixels        units = "pixels"    UnitLabel.text = "Pixels"    UnitLabel.width = vTicksPixels.graphics.stringWidth(UnitLabel.text) + 4    app.SetUnitsMenu units    setPrefString "vUnits", units        refresh  end    if OptionsGroupRulers.checked then    if hRuler.units <> units then      hRuler.UsePixels    end  end  End SubvRuler.DrawInches:Sub DrawInches()  dim x, p as integer  dim label as string  dim in, div as integer  dim pic as picture    pic = NewPicture(ticksCanvas.width, maxheight+20, screen(0).depth)    pic.graphics.foreColor = backcolor  pic.graphics.fillRect 0, 0, pic.graphics.width, pic.graphics.height    pic.graphics.foreColor = app.tickColor  pic.graphics.textfont = "System"  pic.graphics.textsize = 9    in = app.PixelsToInches(maxheight + 20)  div = 16 //16ths of an inch    for x = 0 to in * div        p = round(app.InchesToPixels(x / div) * app.scale)        if x mod div = 0 then      label = str(x / div)      if label <> "0" then        pic.graphics.foreColor = app.darkTickColor        pic.graphics.drawString label, pic.width - 9 - pic.graphics.stringWidth(label), p + 3      end            pic.graphics.foreColor = app.tickColor      pic.graphics.drawLine pic.width - 7, p - 1, pic.width, p - 1          elseif x mod (div / 2) = 0 then      pic.graphics.drawLine pic.width - 6, p - 1, pic.width, p - 1          elseif x mod (div / 4) = 0 then      pic.graphics.drawLine pic.width - 4, p - 1, pic.width, p - 1          elseif x mod (div / 8) = 0 then      pic.graphics.drawLine pic.width - 3, p - 1, pic.width, p - 1          elseif x mod (div / 16) = 0 then      pic.graphics.drawLine pic.width - 2, p - 1, pic.width, p - 1          end      next    vTicksInches = pic  End SubvRuler.DrawPicas:Sub DrawPicas()  dim x, p as integer  dim picas as integer  dim pic as picture    pic = NewPicture(ticksCanvas.width, maxheight+20, screen(0).depth)    pic.graphics.foreColor = backcolor  pic.graphics.fillRect 0, 0, pic.graphics.width, pic.graphics.height    pic.graphics.foreColor = app.tickColor  pic.graphics.textfont = "System"  pic.graphics.textsize = 9    picas = round(app.PixelsToPicasDbl(maxheight + 20))    for x = 0 to picas        p = round(app.PicasToPixels(str(x)) * app.scale)        if x mod 6 = 0 then      if x <> 0 then        pic.graphics.foreColor = app.darkTickColor        pic.graphics.drawString str(x), pic.width - 9 - pic.graphics.stringWidth(str(x)), p + 3      end            pic.graphics.foreColor = app.tickColor      pic.graphics.drawLine pic.width - 7, p - 1, pic.width, p - 1          elseif x mod 3= 0 then      pic.graphics.drawLine pic.width - 5, p - 1, pic.width, p - 1          else      pic.graphics.drawLine pic.width - 3, p - 1, pic.width, p - 1          end      next    vTicksPicas = picEnd SubvRuler.DrawCm:Sub DrawCm()  dim x, p as integer  dim label as string  dim cm, div as integer  dim pic as picture    pic = NewPicture(ticksCanvas.width, maxheight+20, screen(0).depth)    pic.graphics.foreColor = backcolor  pic.graphics.fillRect 0, 0, pic.graphics.width, pic.graphics.height    pic.graphics.foreColor = app.tickColor  pic.graphics.textfont = "System"  pic.graphics.textsize = 9    cm = app.PixelsToCm(maxheight + 20)  div = 10 // step 10 times for each cm    for x = 0 to cm * div        p = round(app.CmToPixels(x / div) * app.scale)        if x mod div = 0 then      label = str(x / div)      if label <> "0" then        pic.graphics.foreColor = app.darkTickColor        pic.graphics.drawString label, pic.width - 9 - pic.graphics.stringWidth(label), p + 3      end            pic.graphics.foreColor = app.tickColor      pic.graphics.drawLine pic.width - 7, p - 1, pic.width, p - 1          elseif x mod (div / 2) = 0 then      pic.graphics.drawLine pic.width - 5, p - 1, pic.width, p - 1          else      pic.graphics.drawLine pic.width - 3, p - 1, pic.width, p - 1          end      next    vTicksCm = picEnd SubvRuler.DrawInteractiveTick:Sub DrawInteractiveTick()  dim m as integer  dim pad,tickpad as integer  pad  = 12  tickpad = 3    if OptionsShowMousePosition.checked and app.showMousePosition then    m = mousey        if m + 1 < 0 or m > height then      mouseTick.visible = false      mouseRect.visible = false      mouseLabel.visible = false    else      mouseTick.y1 = m      mouseTick.y2 = m            mouseLabel.text = app.Convert(str(m + 1), "pixels", units)      mouseLabel.width = graphics.stringWidth(mouseLabel.text) + 1      mouseRect.width = mouseLabel.width + tickpad + tickpad            if m < unitLabel.top + unitLabel.height + pad - tickpad then        mouseRect.top = unitLabel.top + unitLabel.height + pad              elseif m < lockCanvas.top - mouseRect.height - pad then        mouseRect.top = m + tickpad              elseif m > lockCanvas.top - pad + tickpad + 1 then        mouseRect.top = lockCanvas.top - mouseLabel.height - pad              else        mouseRect.top = m - mouseRect.height - tickpad + 1              end            mouseLabel.top = mouseRect.top + 1            mouseTick.visible = true      mouseRect.visible = true      mouseLabel.visible = true          end  else    mouseTick.visible = false    mouseRect.visible = false    mouseLabel.visible = false  end    End SubvRuler.CheckUnits:Sub CheckUnits(u as String)  if u = "inches" then    UseInches  elseif u = "picas" then    UsePicas  elseif u = "cm" then    UseCm  else    UsePixels  endEnd SubvRuler.DrawPixelsOld:Sub DrawPixelsOld()  dim x, p as integer  dim label as string  dim pic as picture    pic = NewPicture(ticksCanvas.width, maxheight+20, screen(0).depth)    pic.graphics.foreColor = backcolor  pic.graphics.fillRect 0, 0, pic.graphics.width, pic.graphics.height    pic.graphics.foreColor = app.tickColor  pic.graphics.textfont = "System"  pic.graphics.textsize = 9    for x = 0 to maxheight + 20 step 2        p = round(x * app.scale)        if x mod 20 = 0 then      if x mod 100 = 0 then        pic.graphics.foreColor = app.darkTickColor        label = str(x)              else        pic.graphics.foreColor = app.tickColor        label = str(x mod 100)              end            if label <> "0" then        pic.graphics.drawString label, pic.width - 9 - pic.graphics.stringWidth(label), p + 3      end            pic.graphics.foreColor = app.tickColor      pic.graphics.drawLine pic.width - 7, p - 1, pic.width, p - 1          elseif x mod 10 = 0 then      pic.graphics.drawLine pic.width - 6, p - 1, pic.width, p - 1          else      pic.graphics.drawLine pic.width - 3, p - 1, pic.width, p - 1          end      next    vTicksPixels = pic  End SubvRuler.MouseMove:Sub MouseMove(X As Integer, Y As Integer)  app.mouseCursor = nilEnd SubvRuler.MouseExit:Sub MouseExit()  if not app.resizing then    app.ShowMousePosition = true  end    if OptionsShowMousePosition.checked then    app.mouseCursor = CursorCrossHair  else    app.mouseCursor = nil  endEnd SubvRuler.MouseEnter:Sub MouseEnter()  app.ShowMousePosition = false  app.mouseCursor = nilEnd SubvRuler.Close:Sub Close()  setPrefBoolean "vRulerVisible", vRuler.visible  setPrefWindow "vRuler", vRuler  End SubvRuler.Deactivate:Sub Deactivate()  activated = false    if mousex > 0 and mousex < width and mousey > 0 and mousey < height then    app.mouseCursor = nil    app.showMousePosition = false  else    if OptionsShowMousePosition.checked then      app.mouseCursor = CursorCrossHair    else      app.mouseCursor = nil    end  end    buttonClose.backdrop = closebuttondeactivated    if visible then    RulerVertical.text = "Bring Vertical Ruler Forward"  else    RulerVertical.text = "Show Vertical Ruler"    if not hRuler.visible then      app.lastRuler = self    end  endEnd SubvRuler.MouseUp:Sub MouseUp(X As Integer, Y As Integer)  mouseCursor = CursorHandEnd SubvRuler.MouseDrag:Sub MouseDrag(X As Integer, Y As Integer)  self.left = self.left + x - MouseDownX  self.top = self.top + y - MouseDownY    if OptionsGroupRulers.checked then    hRuler.left = hRuler.left + x - MouseDownX    hRuler.top = hRuler.top + y - MouseDownY  endEnd SubvRuler.EnableMenuItems:Sub EnableMenuItems()    RulerClose.enable  RulerChangeLength.enable  EditCopy.enable  OptionsAlignRulers.enable  UnitsPixels.enable  UnitsInches.enable  UnitsPicas.enable  UnitsCm.enable  UnitsCycleUnits.enable  End SubvRuler.Open:Sub Open()  dim u as string  // prefs    top = 82  left = 11  GetPrefWindow("vRuler", self)  CheckUnits(getPrefString("vUnits","pixels"))    // non-prefs  graphics.textfont = "System"  graphics.textsize = 9    backColor = app.rulerColor  RulerVertical.text = "Hide Vertical Ruler"  mouseCursor = CursorHand    End SubvRuler.Activate:Sub Activate()  activated = true    if mousex > 0 and mousex < width and mousey > 0 and mousey < height then    app.mouseCursor = nil    app.showMousePosition = false  end    buttonClose.backdrop = closebutton    app.SetUnitsMenu units  app.tabbed = false    RulerVertical.text = "Hide Vertical Ruler"    SetPrefString "frontmost", "vRuler"End SubvRuler.MouseDown:Function MouseDown(X As Integer, Y As Integer) As Boolean  mouseCursor = CursorHandDown  MouseDownX = x  MouseDownY = y  return trueEnd FunctionvRuler.KeyDown:Function KeyDown(Key As String) As Boolean  app.moveRuler(self,hRuler,key)End FunctionvRuler.ResizeBox.MouseUp:Sub MouseUp(X As Integer, Y As Integer)  app.resizing = false    if keyboard.optionKey then    OpenSizeDialog  end    if mousex < 0 or mousex > width or mousey < 0 or mousey > height then    app.ShowMousePosition = true  endEnd SubvRuler.ResizeBox.MouseExit:Sub MouseExit()  mouseCursor = CursorHandEnd SubvRuler.ResizeBox.MouseEnter:Sub MouseEnter()  mouseCursor = arrowCursorEnd SubvRuler.ResizeBox.MouseDrag:Sub MouseDrag(X As Integer, Y As Integer)  me.window.height = me.window.height + y - MouseDownY    if me.window.height < me.window.minheight then    me.window.height = me.window.minheight  end  if me.window.height > me.window.maxheight then    me.window.height = me.window.maxheight  endEnd SubvRuler.ResizeBox.MouseDown:Function MouseDown(X As Integer, Y As Integer) As Boolean  app.resizing = true  MouseDownX = x  MouseDownY = y  return trueEnd FunctionvRuler.UnitLabel.MouseExit:Sub MouseExit()  if activated then    mouseCursor = CursorHand  endEnd SubvRuler.UnitLabel.MouseEnter:Sub MouseEnter()  if activated then    mouseCursor = arrowCursor  endEnd SubvRuler.UnitLabel.MouseMove:Sub MouseMove(X As Integer, Y As Integer)  if activated then    mouseCursor = arrowCursor  endEnd SubvRuler.UnitLabel.MouseUp:Sub MouseUp(X As Integer, Y As Integer)  if x > 0 and x < me.width and y > 0 and y < me.height then    CycleUnits    mouseCursor = arrowCursor  else    mouseCursor = CursorHand  endEnd SubvRuler.UnitLabel.MouseDown:Function MouseDown(X As Integer, Y As Integer) As Boolean  return trueEnd FunctionvRuler.ButtonClose.MouseDown:Function MouseDown(X As Integer, Y As Integer) As Boolean  Me.backdrop = closebuttondown  return trueEnd FunctionvRuler.ButtonClose.MouseUp:Sub MouseUp(X As Integer, Y As Integer)  me.backdrop = closebutton    if x > 0 and x < me.width and y > 0 and y < me.height then    hide  else    mouseCursor = CursorHand  endEnd SubvRuler.ButtonClose.MouseExit:Sub MouseExit()  if activated then    mouseCursor = CursorHand    Me.Backdrop = closebutton  endEnd SubvRuler.ButtonClose.MouseEnter:Sub MouseEnter()  if activated then    mouseCursor = arrowCursor    me.Backdrop = closebuttonover  endEnd SubvRuler.LockCanvas.MouseExit:Sub MouseExit()  mouseCursor = CursorHandEnd SubvRuler.LockCanvas.MouseEnter:Sub MouseEnter()  mouseCursor = arrowCursorEnd SubvRuler.LockCanvas.MouseUp:Sub MouseUp(X As Integer, Y As Integer)  if x > 0 and x < me.width and y > 0 and y < me.height then    app.GroupRulers  endEnd SubvRuler.LockCanvas.MouseDown:Function MouseDown(X As Integer, Y As Integer) As Boolean  return trueEnd FunctionAboutWindow.MouseExit:Sub MouseExit()  app.ReturnCursorEnd SubAboutWindow.MouseEnter:Sub MouseEnter()  app.mouseCursor = nilEnd SubAboutWindow.MouseMove:Sub MouseMove(X As Integer, Y As Integer)  app.mouseCursor = nilEnd SubAboutWindow.EnableMenuItems:Sub EnableMenuItems()  RulerClose.enableEnd SubAboutWindow.Canvas1.MouseDown:Function MouseDown(X As Integer, Y As Integer) As Boolean  showURL "http://www.realsoftware.com"End FunctionAboutWindow.StaticText4.MouseExit:Sub MouseExit()  me.textColor = RGB(0,0,0)End SubAboutWindow.StaticText4.MouseEnter:Sub MouseEnter()  me.textColor = RGB(20,20,255)End SubAboutWindow.StaticText4.MouseDown:Function MouseDown(X As Integer, Y As Integer) As Boolean  showURL me.textEnd FunctionAboutWindow.ButtonTips.Action:Sub Action()  TipsWindow.show  hideEnd SubAboutWindow.ButtonClose.Action:Sub Action()  hideEnd SubAboutWindow.appTimer.Action:Sub Action()  if hRuler.visible then    hRuler.DrawInteractiveTick  end    if vRuler.visible then    vRuler.DrawInteractiveTick  end    //check for system cursor in menubar  if system.MouseY < 22 then    if not app.MouseIsInMenuBar then      app.MouseIsInMenuBar = true      app.ShowMousePosition = false      app.mouseCursor = nil    end  else    if app.MouseIsInMenuBar then      app.MouseIsInMenuBar = false      app.ShowMousePosition = true      if OptionsShowMousePosition.checked then        app.mouseCursor = CursorCrossHair      else        app.mouseCursor = nil      end    end  end    // check for keystrokes  if app.keyListening and app.activated then        if keyboard.asyncKeyDown(&h30) then      if app.lastKey <> "tab" then        app.lastKey = "tab"        app.ToggleTab      end          elseif keyboard.asyncKeyDown(&h04) then      if app.lastKey <> "h" then        app.lastKey = "h"        if hRuler.visible then          hRuler.hide        else          hRuler.show        end      end          elseif keyboard.asyncKeyDown(&h09) then      if app.lastKey <> "v" then        app.lastKey = "v"        if vRuler.visible then          vRuler.hide        else          vRuler.show        end      end          elseif keyboard.asyncKeyDown(&h31) then      'msgbox window(0).title      if app.lastKey <> "space" then        app.lastKey = "space"        if GetPrefString("frontmost","") = "vRuler" then          hRuler.show        elseif GetPrefString("frontmost","") = "hRuler" then          vRuler.show        else          app.lastRuler.show        end      end          else      app.lastKey = ""    end        // other keys    if keyboard.asyncKeyDown(&h2C) and keyboard.asyncCommandKey then      TipsWindow.show    end      end  End SubTipsWindow.MouseExit:Sub MouseExit()  if OptionsShowMousePosition.checked then    app.mouseCursor = CursorCrossHair  else    app.mouseCursor = nil  endEnd SubTipsWindow.MouseMove:Sub MouseMove(X As Integer, Y As Integer)  app.mouseCursor = nilEnd SubTipsWindow.MouseEnter:Sub MouseEnter()  app.mouseCursor = nilEnd SubTipsWindow.EnableMenuItems:Sub EnableMenuItems()  RulerClose.enableEnd SubTipsWindow.ButtonOK.Action:Sub Action()  hideEnd SubSizeDialog.init:Sub init()  unitLabel.text = units    if units = "pixels" then    SizeField.text = str(RulerLength)  elseif units = "inches" then    SizeField.text = str(app.PixelsToInches(RulerLength))  elseif units = "picas" then    SizeField.text = app.PixelsToPicas(RulerLength)  elseif units = "cm" then    SizeField.text = str(app.PixelsToCm(RulerLength))      end    SizeField.selLength = len(SizeField.text)    showEnd SubSizeDialog.MouseExit:Sub MouseExit()  if OptionsShowMousePosition.checked then    app.mouseCursor = CursorCrossHair  else    app.mouseCursor = nil  endEnd SubSizeDialog.MouseEnter:Sub MouseEnter()  app.mouseCursor = nilEnd SubSizeDialog.MouseMove:Sub MouseMove(X As Integer, Y As Integer)  app.mouseCursor = nilEnd SubSizeDialog.Close:Sub Close()  SizeField.text = ""End SubSizeDialog.SizeButton.Action:Sub Action()  dim v as integer    if units = "pixels" then    v = CDbl(SizeField.text)  elseif units = "inches" then    v = app.InchesToPixels(CDbl(SizeField.text))  elseif units = "picas" then    v = app.PicasToPixels(SizeField.text)  elseif units = "cm" then    v = app.CmToPixels(CDbl(SizeField.text))  end    v = v - 1 // ruler length is actually 1 pixel less since we're using left edge as 0    if RulertoSize.width > RulerToSize.height then    // change width of horizontal ruler    if v > RulertoSize.maxwidth then      RulertoSize.width = RulertoSize.maxwidth    elseif v < RulertoSize.minwidth then      RulertoSize.width = RulertoSize.minwidth    else      RulertoSize.width = v    end  else    // change height of vertical ruler    if v > RulertoSize.maxheight then      RulertoSize.height = RulertoSize.maxheight    elseif v < RulertoSize.minheight then      RulertoSize.height = RulertoSize.minheight    else      RulertoSize.height = v    end  end    hideEnd SubSizeDialog.CancelButton.Action:Sub Action()  hideEnd SubCmWarning.Open:Sub Open()  app.mouseCursor = nilEnd SubCmWarning.Close:Sub Close()  app.ReturnCursorEnd SubCmWarning.Activate:Sub Activate()  app.mouseCursor = nilEnd SubCmWarning.Deactivate:Sub Deactivate()  app.ReturnCursorEnd SubCmWarning.EnableMenuItems:Sub EnableMenuItems()  RulerClose.enableEnd SubCmWarning.MouseMove:Sub MouseMove(X As Integer, Y As Integer)  app.mouseCursor = nilEnd SubCmWarning.MouseExit:Sub MouseExit()  app.ReturnCursorEnd SubCmWarning.MouseEnter:Sub MouseEnter()  app.mouseCursor = nilEnd SubCmWarning.CautionCanvas.Paint:Sub Paint(g As Graphics)  g.drawNoteIcon 0,0End SubCmWarning.PushButton1.Action:Sub Action()  if DontShowWarning.value then    setPrefBoolean "ShowCmWarning", false  end  closeEnd SubREALEasyPrefs.InitPrefFile:Sub InitPrefFile(prefName as string)  Dim aOut as TextOutputStream  Dim aIn as TextInputStream    prefFile=GetFolderItem(PreferencesFolder.Child(prefName).AbsolutePath)  if not prefFile.Exists then    aOut=prefFile.CreateTextFile  else    aIn=prefFile.OpenAsTextFile    while not aIn.EOF      prefNames.append aIn.ReadLine      prefItems.append aIn.ReadLine    wend  end ifEnd SubREALEasyPrefs.GetPrefString:Function GetPrefString(fieldName as string,default as string) As String  Dim n as integer    for n=1 to UBound(prefNames)    if prefNames(n)=fieldName then      return prefItems(n)    end if  next    return defaultEnd FunctionREALEasyPrefs.GetPrefNumber:Function GetPrefNumber(fieldName as string,default as integer) As Integer  return Val(GetPrefString(fieldName,Str(default)))End FunctionREALEasyPrefs.GetPrefBoolean:Function GetPrefBoolean(fieldName as string,default as boolean) As Boolean  Dim strBoolean as string    strBoolean="false"  if default then    strBoolean="true"  end if    strBoolean=GetPrefString(fieldName,strBoolean)    if strBoolean="true" then    return true  else    return false  end ifEnd FunctionREALEasyPrefs.SetPrefString:Sub SetPrefString(fieldName as string,fieldValue as string)  Dim n as integer    for n=1 to UBound(prefNames)    if prefNames(n)=fieldName then      prefItems(n)=fieldValue      return    end if  next    prefNames.append fieldName  prefItems.append fieldValueEnd SubREALEasyPrefs.SetPrefNumber:Sub SetPrefNumber(fieldName as string,fieldValue as integer)  SetPrefString(fieldName,Str(fieldValue))End SubREALEasyPrefs.SetPrefBoolean:Sub SetPrefBoolean(fieldName as string,fieldValue as Boolean)  Dim strBoolean as string    strBoolean="false"  if fieldValue then    strBoolean="true"  end if    SetPrefString(fieldName,strBoolean)End SubREALEasyPrefs.WritePrefsFile:Sub WritePrefsFile()  Dim aOut as TextOutputStream  Dim n as integer    prefFile.Delete  aOut=prefFile.CreateTextFile  for n=1 to UBound(prefNames)    aOut.WriteLine prefNames(n)    aOut.WriteLine prefItems(n)  next  'By Chris Comeau  prefFile.MacType="pref"End SubREALEasyPrefs.SetPrefFolderItem:Sub SetPrefFolderItem(fieldName as string, fieldValue as FolderItem)  if fieldValue=nil then    DeletePref(fieldName)    return  end if  SetPrefString(fieldName,fieldValue.AbsolutePath)End SubREALEasyPrefs.GetPrefFolderItem:Function GetPrefFolderItem(fieldName as string,default as FolderItem) As FolderItem  Dim strFolderItem as string    if default=nil then    strFolderItem=""  else    strFolderItem=default.AbsolutePath  end if    strFolderItem=GetPrefString(fieldName,strFolderItem)  if strFolderItem="" then    return nil  else    return GetFolderItem(strFolderItem)  end ifEnd FunctionREALEasyPrefs.SetPrefColor:Sub SetPrefColor(fieldName as string,fieldValue as Color)  Dim colString as string    colString=Str(fieldValue.red)+","+Str(fieldValue.green)+","+Str(fieldValue.blue)  SetPrefString(fieldName,colString)End SubREALEasyPrefs.GetPrefColor:Function GetPrefColor(fieldName as string,default as Color) As Color  Dim colString as string    colString=Str(default.red)+","+Str(default.green)+","+Str(default.blue)  colString=GetPrefString(fieldName,colString)  return RGB(Val(NthField(colString,",",1)),Val(NthField(colString,",",2)),Val(NthField(colString,",",3)))End FunctionREALEasyPrefs.DeletePref:Sub DeletePref(fieldName as string)  Dim n as integer    for n=1 to UBound(prefNames)    if prefNames(n)=fieldName then      prefNames.remove n      prefItems.remove n    end if  nextEnd SubREALEasyPrefs.SetPrefDouble:Sub SetPrefDouble(fieldName as string, fieldValue as double)  SetPrefString(fieldName,Str(fieldValue))End SubREALEasyPrefs.GetPrefDouble:Function GetPrefDouble(fieldName as string, default as double) As Double  return Val(GetPrefString(fieldName,Str(default)))End FunctionREALEasyPrefs.SetPrefWindow:Sub SetPrefWindow(fieldName as string,fieldValue as Window)  Dim winStr as String    if fieldValue=nil then    DeletePref(fieldName)    return  end if    winStr=Str(fieldValue.left)+","+Str(fieldValue.top)+","+Str(fieldValue.width)+","+Str(fieldValue.height)  SetPrefString(fieldName,winStr)End SubREALEasyPrefs.GetPrefWindow:Sub GetPrefWindow(fieldName as string, default as Window)  Dim winStr as string    winStr=Str(default.left)+","+Str(default.top)+","+Str(default.width)+","+Str(default.height)  winStr=GetPrefString(fieldName,winStr)    default.left=Val(NthField(winStr,",",1))  default.top=Val(NthField(winStr,",",2))  default.width=Val(NthField(winStr,",",3))  default.height=Val(NthField(winStr,",",4))End SubREALEasyPrefs.GetPrefPopupMenu:Sub GetPrefPopupMenu(fieldName as string,default as PopupMenu)  Dim n,total as integer    //Items  total=GetPrefNumber(fieldName+" Items",0)  for n=0 to total-1    default.AddRow GetPrefString(fieldName+" Item "+Str(n),"")  next    //Selection  default.ListIndex=GetPrefNumber(fieldName+" Selection",default.ListIndex)End SubREALEasyPrefs.SetPrefPopupMenu:Sub SetPrefPopupMenu(fieldName as string,fieldValue as PopupMenu)  Dim n,total as integer    //----Remove Old  //Items  total=GetPrefNumber(fieldName+" Items",0)  DeletePref(fieldName+" Items")  for n=0 to total-1    DeletePref(fieldName+" Item "+Str(n))  next    //Selection  DeletePref(fieldName+" Selection")      //-----Add New  //Items  SetPrefNumber(fieldName+" Items",fieldValue.ListCount)  for n=0 to fieldValue.ListCount-1    SetPrefString(fieldName+" Item "+Str(n),fieldValue.List(n))  next  //Selection  SetPrefNumber(fieldName+" Selection",fieldValue.ListIndex)End SubREALEasyPrefs.SetPrefListBox:Sub SetPrefListBox(fieldName as string,fieldValue as ListBox)  Dim row,col as integer  Dim trows,tcols as integer    //------Remove Old  trows=GetPrefNumber(fieldName+" NRows",0)  tcols=GetPrefNumber(fieldName+" NCols",0)    DeletePref(fieldName+" NRows")  DeletePref(fieldName+" NCols")  DeletePref(fieldName+" CWidths")    for row=0 to trows-1    for col=0 to tcols-1      DeletePref(fieldName+" Cell("+Str(row)+","+Str(col)+")")    next  next    for row=0 to trows-1    DeletePref(fieldName+" Sel "+Str(row))  next      //------Add New    'Num Rows  SetPrefNumber(fieldName+" NRows",fieldValue.ListCount)  'NumCols  SetPrefNumber(fieldName+" NCols",fieldValue.ColumnCount)  'ColWidth  SetPrefString(fieldName+" CWidths",fieldValue.ColumnWidths)  'cells  for row=0 to fieldValue.ListCount-1    for col=0 to fieldValue.ColumnCount-1      SetPrefString(fieldName+" Cell("+Str(row)+","+Str(col)+")",fieldValue.Cell(row,col))    next  next  'selections  for row=0 to fieldValue.ListCount-1    if fieldValue.Selected(row) then      SetPrefBoolean(fieldName+" Sel "+Str(row),true)    end if  next  End SubREALEasyPrefs.GetPrefListBox:Sub GetPrefListBox(fieldName as string,default as ListBox)  Dim row,col as integer  Dim trows,tcols as integer    trows=GetPrefNumber(fieldName+" NRows",default.ListCount)  tcols=GetPrefNumber(fieldName+" NCols",default.ColumnCount)    default.ColumnCount=tcols  default.ColumnWidths=GetPrefString(fieldName+" CWidths",default.ColumnWidths)      for row=0 to trows-1    default.AddRow ""    for col=0 to tcols-1      default.Cell(row,col)=GetPrefString(fieldName+" Cell("+Str(row)+","+Str(col)+")","")    next  next    for row=0 to trows-1    if GetPrefBoolean(fieldName+" Sel "+Str(row),false) then      default.Selected(row)=true    end if  next  End SubConversionPrefWindow.Deactivate:Sub Deactivate()  app.ReturnCursor  app.keyListening = trueEnd SubConversionPrefWindow.Activate:Sub Activate()  app.mouseCursor = nil  app.keyListening = falseEnd SubConversionPrefWindow.Close:Sub Close()  app.ReturnCursor  app.keyListening = trueEnd SubConversionPrefWindow.MouseEnter:Sub MouseEnter()  app.mouseCursor = nil  End SubConversionPrefWindow.MouseMove:Sub MouseMove(X As Integer, Y As Integer)  app.mouseCursor = nil  End SubConversionPrefWindow.Open:Sub Open()  app.mouseCursor = nil  app.keyListening = false    ppi.text = str(app.ppi)  ppi.selStart = 0  ppi.selLength = len(ppi.text)End SubConversionPrefWindow.ppi.GotFocus:Sub GotFocus()  if me.text <> "72" then    ButtonDefault.enabled = true  else    ButtonDefault.enabled = false  endEnd SubConversionPrefWindow.ppi.TextChange:Sub TextChange()  if me.text <> "72" then    ButtonDefault.enabled = true  else    ButtonDefault.enabled = false  endEnd SubConversionPrefWindow.ButtonOK.Action:Sub Action()  dim p as double    p = CDbl(ppi.text)  if p < 0 then    p = p * -1  end  app.ppi = p  setPrefDouble("ppi",app.ppi)  app.RefreshRulers  close  End SubConversionPrefWindow.ButtonCancel.Action:Sub Action()  closeEnd SubConversionPrefWindow.ButtonDefault.Action:Sub Action()  ppi.text = "72"  me.enabled = falseEnd SubUnitConverter.DoConvert:Sub DoConvert()  ResultField.text = app.Convert(amountField.text, FromUnit.text, ToUnit.text)  AmountField.SelStart = 0  AmountField.SelLength = len(AmountField.text)End SubUnitConverter.EnableMenuItems:Sub EnableMenuItems()  RulerClose.enableEnd SubUnitConverter.MouseExit:Sub MouseExit()  app.ReturnCursorEnd SubUnitConverter.MouseEnter:Sub MouseEnter()  app.mouseCursor = nilEnd SubUnitConverter.MouseMove:Sub MouseMove(X As Integer, Y As Integer)  app.mouseCursor = nilEnd SubUnitConverter.Deactivate:Sub Deactivate()  app.KeyListening = trueEnd SubUnitConverter.Activate:Sub Activate()  app.KeyListening = false  DoConvertEnd SubUnitConverter.Close:Sub Close()  setPrefWindow "UnitConverter", selfEnd SubUnitConverter.Open:Sub Open()  GetPrefWindow("UnitConverter", self)End SubUnitConverter.FromUnit.Change:Sub Change()  DoConvertEnd SubUnitConverter.ToUnit.Change:Sub Change()  DoConvertEnd SubUnitConverter.ButtonConvert.Action:Sub Action()  DoConvertEnd SubUnitConverter.ButtonConverterSettings.Action:Sub Action()  ConversionPrefWindow.showEnd Sub